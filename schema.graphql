# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type Category {
    games: [Game!]!
    id: Int!
    name: String!
}

type Game {
    categories: [Category!]!
    complexity: Int
    countPlayersMax: Int
    countPlayersMin: Int
    description: String
    expansions: [Game!]!
    id: Int!
    images: [Image!]!
    isCoop: Boolean
    isExpansionOf: Game
    mechanisms: [Mechanism!]!
    minutesPlaytimeMax: Int
    minutesPlaytimeMin: Int
    moods: [Mood!]!
    name: String!
    playableWith: [Game!]!
    ratings: [Rating!]!
    sessions: [Session!]!
    size: Int
    universes: [Universe!]!
}

type Image {
    games: [Game!]!
    id: Int!
    link: String!
    name: String!
}

type Mechanism {
    games: [Game!]!
    id: Int!
    name: String!
}

type Mood {
    games: [Game!]!
    id: Float!
    name: String!
}

type Mutation {
    createCategory(categoryData: CategoryInput!): Category!
    createGame(gameData: GameInput!): Game!
    createImage(imageData: ImageInput!): Image!
    createMechanism(mechanismData: MechanismInput!): Mechanism!
    createMood(moodData: MoodInput!): Mood!
    createPlayer(playerData: PlayerInput!): Player!
    createRating(ratingData: RatingInput!): Rating!
    createSession(sessionData: SessionInput!): Session!
    createUniverse(universeData: UniverseInput!): Universe!
    createWishlist(wishlistData: WishlistInput!): Wishlist!
    deleteCategory(id: Int!): Boolean!
    deleteGame(id: Int!): Boolean!
    deleteImage(id: Int!): Boolean!
    deleteMechanism(id: Int!): Boolean!
    deleteMood(id: Int!): Boolean!
    deletePlayer(id: Int!): Boolean!
    deleteRating(id: Int!): Boolean!
    deleteSession(id: Int!): Boolean!
    deleteUniverse(id: Int!): Boolean!
    deleteWishlist(id: Int!): Boolean!
    updateCategory(categoryData: UpdateCategoryInput!): Category!
    updateGame(gameData: UpdateGameInput!): Game!
    updateImage(imageData: UpdateImageInput!): Image!
    updateMechanism(mechanismData: UpdateMechanismInput!): Mechanism!
    updateMood(moodData: UpdateMoodInput!): Mood!
    updatePlayer(playerData: UpdatePlayerInput!): Player!
    updateRating(ratingData: UpdateRatingInput!): Rating!
    updateSession(sessionData: UpdateSessionInput!): Session!
    updateUniverse(universeData: UpdateUniverseInput!): Universe!
    updateWishlist(wishlistData: UpdateWishlistInput!): Wishlist!
}

type Player {
    id: Int!
    name: String!
    ratings: [Rating!]!
    sessionsPlayed: [Session!]!
    sessionsWon: [Session!]!
}

type Query {
    categories: [Category!]!
    category(id: Int!): Category!
    game(id: Int!): Game!
    games: [Game!]!
    image(id: Int!): Image!
    images: [Image!]!
    mechanism(id: Int!): Mechanism!
    mechanisms: [Mechanism!]!
    mood(id: Int!): Mood!
    moods: [Mood!]!
    player(id: Int!): Player!
    players: [Player!]!
    rating(id: Int!): Rating!
    ratings: [Rating!]!
    session(id: Int!): Session!
    sessions: [Session!]!
    universe(id: Int!): Universe!
    universes: [Universe!]!
    user(id: Int): User!
    wishlist(id: Int!): Wishlist!
    wishlists: [Wishlist!]!
}

type Rating {
    game: Game!
    id: Int!
    player: Player!
    rating: Int
}

type Session {
    end: DateTime!
    game: Game
    id: Int!
    players: [Player!]!
    start: DateTime!
    winners: [Player!]!
}

type Universe {
    games: [Game!]!
    id: Int!
    name: String!
}

type User {
    id: Int!
    name: String!
    password: String!
}

type Wishlist {
    id: Int!
    link: String!
    name: String!
    price: Int!
}

input CategoryInput {
    games: [Int!]
    id: Int
    name: String!
}

input GameInput {
    categories: [Int!]
    complexity: Int
    countPlayersMax: Int
    countPlayersMin: Int
    description: String
    expansions: [Int!]
    id: Int
    isCoop: Boolean
    isExpansionOf: Int
    mechanisms: [Int!]
    minutesPlaytimeMax: Int
    minutesPlaytimeMin: Int
    moods: [Int!]
    name: String!
    playableWith: [Int!]
    size: Int
    universes: [Int!]
}

input ImageInput {
    games: [Int!]
    id: Int
    link: String!
    name: String!
}

input MechanismInput {
    games: [Int!]
    id: Int
    name: String!
}

input MoodInput {
    games: [Int!]
    id: Int
    name: String!
}

input PlayerInput {
    games: [Int!]
    id: Int
    name: String!
}

input RatingInput {
    game: Int!
    id: Int
    player: Int!
    rating: Float!
}

input SessionInput {
    end: DateTime!
    game: Int
    id: Int
    players: [Int!]
    start: DateTime!
    winners: [Int!]
}

input UniverseInput {
    games: [Int!]
    id: Int
    name: String!
}

input UpdateCategoryInput {
    games: [Int!]
    id: Int!
    name: String
}

input UpdateGameInput {
    categories: [Int!]
    complexity: Int
    countPlayersMax: Int
    countPlayersMin: Int
    description: String
    expansions: [Int!]
    id: Int!
    isCoop: Boolean
    isExpansionOf: Int
    mechanisms: [Int!]
    minutesPlaytimeMax: Int
    minutesPlaytimeMin: Int
    moods: [Int!]
    name: String
    playableWith: [Int!]
    size: Int
    universes: [Int!]
}

input UpdateImageInput {
    games: [Int!]
    id: Int!
    link: String
    name: String
}

input UpdateMechanismInput {
    games: [Int!]
    id: Int!
    name: String
}

input UpdateMoodInput {
    games: [Int!]
    id: Int!
    name: String
}

input UpdatePlayerInput {
    games: [Int!]
    id: Int!
    name: String
}

input UpdateRatingInput {
    game: Int
    id: Int!
    player: Int
    rating: Float
}

input UpdateSessionInput {
    end: DateTime
    game: Int
    id: Int!
    players: [Int!]
    start: DateTime
    winners: [Int!]
}

input UpdateUniverseInput {
    games: [Int!]
    id: Int!
    name: String
}

input UpdateWishlistInput {
    games: [Int!]
    id: Int!
    name: String
}

input WishlistInput {
    games: [Int!]
    id: Int
    name: String!
}


"A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format."
scalar DateTime