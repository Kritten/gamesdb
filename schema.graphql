# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type Category {
    games: [Game!]!
    id: Int!
    name: String!
}

type Game {
    categories: [Category!]!
    complexity: Int
    countPlayersMax: Int
    countPlayersMin: Int
    description: String
    expansions: [Game!]!
    id: Int!
    isCoop: Boolean
    isExpansionOf: Game
    mechanisms: [Mechanism!]!
    minutesPlaytimeMax: Int
    minutesPlaytimeMin: Int
    moods: [Mood!]!
    name: String!
    playableWith: [Game!]!
    sessions: [Session!]!
    size: Int
    universes: [Universe!]!
}

type Mechanism {
    games: [Game!]!
    id: Int!
    name: String!
}

type Mood {
    games: [Game!]!
    id: Float!
    name: String!
}

type Mutation {
    createCategory(categoryData: CategoryInput!): Category!
    createGame(gameData: GameInput!): Game!
    createMechanism(mechanismData: MechanismInput!): Mechanism!
    createMood(moodData: MoodInput!): Mood!
    createPlayer(playerData: PlayerInput!): Player!
    createSession(sessionData: SessionInput!): Session!
    createUniverse(universeData: UniverseInput!): Universe!
    createWishlist(wishlistData: WishlistInput!): Wishlist!
    deleteCategory(id: Int!): Boolean!
    deleteGame(id: Int!): Boolean!
    deleteMechanism(id: Int!): Boolean!
    deleteMood(id: Int!): Boolean!
    deletePlayer(id: Int!): Boolean!
    deleteSession(id: Int!): Boolean!
    deleteUniverse(id: Int!): Boolean!
    deleteWishlist(id: Int!): Boolean!
    updateCategory(categoryData: UpdateCategoryInput!): Category!
    updateGame(gameData: UpdateGameInput!): Game!
    updateMechanism(mechanismData: UpdateMechanismInput!): Mechanism!
    updateMood(moodData: UpdateMoodInput!): Mood!
    updatePlayer(playerData: UpdatePlayerInput!): Player!
    updateSession(sessionData: UpdateSessionInput!): Session!
    updateUniverse(universeData: UpdateUniverseInput!): Universe!
    updateWishlist(wishlistData: UpdateWishlistInput!): Wishlist!
}

type Player {
    id: Int!
    name: String!
    sessionsPlayed: [Session!]!
    sessionsWon: [Session!]!
}

type Query {
    categories: [Category!]!
    category(id: Int!): Category!
    game(id: Int!): Game!
    games: [Game!]!
    mechanism(id: Int!): Mechanism!
    mechanisms: [Mechanism!]!
    mood(id: Int!): Mood!
    moods: [Mood!]!
    player(id: Int!): Player!
    players: [Player!]!
    session(id: Int!): Session!
    sessions: [Session!]!
    universe(id: Int!): Universe!
    universes: [Universe!]!
    wishlist(id: Int!): Wishlist!
    wishlists: [Wishlist!]!
}

type Session {
    date: DateTime!
    duration: Int!
    game: [Game!]!
    id: Int!
    players: [Player!]!
    winners: [Player!]!
}

type Universe {
    games: [Game!]!
    id: Int!
    name: String!
}

type Wishlist {
    id: Int!
    link: String!
    name: String!
    price: Int!
}

input CategoryInput {
    games: [Int!]
    id: Int
    name: String!
}

input GameInput {
    categories: [Int!]
    complexity: Int
    countPlayersMax: Int
    countPlayersMin: Int
    description: String
    expansions: [Int!]
    id: Int
    isCoop: Boolean
    isExpansionOf: Int
    mechanisms: [Int!]
    minutesPlaytimeMax: Int
    minutesPlaytimeMin: Int
    moods: [Int!]
    name: String!
    playableWith: [Int!]
    size: Int
    universes: [Int!]
}

input MechanismInput {
    games: [Int!]
    id: Int
    name: String!
}

input MoodInput {
    games: [Int!]
    id: Int
    name: String!
}

input PlayerInput {
    games: [Int!]
    id: Int
    name: String!
}

input SessionInput {
    date: DateTime!
    duration: Float!
    games: [Int!]
    id: Int
    players: [Int!]
    winners: [Int!]
}

input UniverseInput {
    games: [Int!]
    id: Int
    name: String!
}

input UpdateCategoryInput {
    games: [Int!]
    id: Int!
    name: String
}

input UpdateGameInput {
    categories: [Int!]
    complexity: Int
    countPlayersMax: Int
    countPlayersMin: Int
    description: String
    expansions: [Int!]
    id: Int!
    isCoop: Boolean
    isExpansionOf: Int
    mechanisms: [Int!]
    minutesPlaytimeMax: Int
    minutesPlaytimeMin: Int
    moods: [Int!]
    name: String
    playableWith: [Int!]
    size: Int
    universes: [Int!]
}

input UpdateMechanismInput {
    games: [Int!]
    id: Int!
    name: String
}

input UpdateMoodInput {
    games: [Int!]
    id: Int!
    name: String
}

input UpdatePlayerInput {
    games: [Int!]
    id: Int!
    name: String
}

input UpdateSessionInput {
    date: DateTime
    duration: Float
    games: [Int!]
    id: Int!
    players: [Int!]
    winners: [Int!]
}

input UpdateUniverseInput {
    games: [Int!]
    id: Int!
    name: String
}

input UpdateWishlistInput {
    games: [Int!]
    id: Int!
    name: String
}

input WishlistInput {
    games: [Int!]
    id: Int
    name: String!
}


"A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format."
scalar DateTime