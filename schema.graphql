"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

type Category {
  id: ID!
  games: [Game!]!
  name: String!
}

input CategoryInput {
  id: ID
  games: [ID!]
  name: String!
}

type CountsModel {
  gamesDigital: Float!
  gamesAnalog: Float!
  ratings: Float!
  wishlists: Float!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Game {
  id: ID!
  idBGG: Int
  ratingBGG: Float
  countPlayersMin: Int
  countPlayersMax: Int
  minutesPlaytimeMin: Int
  minutesPlaytimeMax: Int
  complexity: Int
  size: Int
  universes: [Universe!]!
  categories: [Category!]!
  mechanisms: [Mechanism!]!
  moods: [Mood!]!
  playableWith: [Game!]!
  isExpansionOf: Game
  expansions: [Game!]!
  ratings: [Rating!]!
  sessions: [Session!]!
  name: String!
  description: String
  isCoop: Boolean
  isDigital: Boolean!
  images: String!
  ratingAverage: Float
  ratingCount: Float
}

type GameCollectionData {
  count: Int!
  items: [Game!]!
}

input GameInput {
  idBGG: Int
  ratingBGG: Float
  countPlayersMin: Int
  countPlayersMax: Int
  minutesPlaytimeMin: Int
  minutesPlaytimeMax: Int
  complexity: Int
  size: Int
  universes: [ID!]
  categories: [ID!]
  mechanisms: [ID!]
  moods: [ID!]
  images: String
  ratings: [ID!]
  playableWith: [ID!]
  isExpansionOf: ID
  expansions: [ID!]
  name: String!
  description: String
  isCoop: Boolean
  isDigital: Boolean
}

type GamesCountPlayedCollectionDataModel {
  count: Int!
  items: [GamesCountPlayedItem!]!
}

type GamesCountPlayedItem {
  id: ID!
  countPlayed: Int!
  name: String!
}

type GamesLastPlayedCollectionDataModel {
  count: Int!
  items: [GamesLastPlayedItem!]!
}

type GamesLastPlayedItem {
  id: ID!
  session: Session!
  name: String!
}

type GamesTimePlayedCollectionDataModel {
  count: Int!
  items: [GamesTimePlayedItem!]!
}

type GamesTimePlayedItem {
  id: ID!
  timePlayed: Int!
  name: String!
}

type GraphCollectionDataModel {
  count: Int!
  items: [GraphItem!]!
}

type GraphItem {
  data: [Int!]!
}

input InputCollection {
  page: Int!
  count: Int
  leftJoins: [String!] = []
  sortBy: [String!]!
  sortDesc: [Boolean!]!
  filters: [InputCollectionFilter!]!
}

input InputCollectionFilter {
  valueInt: Int
  valueFloat: Float
  valueRange: [Float!]
  field: String!
  valueBoolean: Boolean
  valueString: String
  valueDate: DateTime
  operator: String!
}

type Mechanism {
  id: ID!
  games: [Game!]!
  name: String!
}

input MechanismInput {
  id: ID
  games: [ID!]
  name: String!
}

type Mood {
  id: ID!
  games: [Game!]!
  name: String!
}

input MoodInput {
  id: ID
  games: [ID!]
  name: String!
}

type Mutation {
  createGame(gameData: GameInput!): Game!
  updateGame(gameData: UpdateGameInput!): Game!
  deleteGame(id: ID!): Boolean!
  createCategory(categoryData: CategoryInput!): Category!
  updateCategory(categoryData: UpdateCategoryInput!): Category!
  deleteCategory(id: ID!): Boolean!
  createUniverse(universeData: UniverseInput!): Universe!
  updateUniverse(universeData: UpdateUniverseInput!): Universe!
  deleteUniverse(id: ID!): Boolean!
  createSession(sessionData: SessionInput!): Session!
  updateSession(sessionData: UpdateSessionInput!): Session!
  deleteSession(id: ID!): Boolean!
  createMechanism(mechanismData: MechanismInput!): Mechanism!
  updateMechanism(mechanismData: UpdateMechanismInput!): Mechanism!
  deleteMechanism(id: ID!): Boolean!
  createMood(moodData: MoodInput!): Mood!
  updateMood(moodData: UpdateMoodInput!): Mood!
  deleteMood(id: ID!): Boolean!
  createPlayer(playerData: PlayerInput!): Player!
  updatePlayer(playerData: UpdatePlayerInput!): Player!
  deletePlayer(id: ID!): Boolean!
  createPlaytime(playtimeData: PlaytimeInput!): Playtime!
  updatePlaytime(playtimeData: UpdatePlaytimeInput!): Playtime!
  deletePlaytime(id: ID!): Boolean!
  updateWishlistTaken(wishlistData: UpdateWishlistInput!): Wishlist!
  createWishlist(wishlistData: WishlistInput!): Wishlist!
  updateWishlist(wishlistData: UpdateWishlistInput!): Wishlist!
  deleteWishlist(id: ID!): Boolean!
  createRating(ratingData: RatingInput!): Rating!
  updateRating(ratingData: UpdateRatingInput!): Rating!
  deleteRating(id: ID!): Boolean!
}

type Player {
  id: ID!
  sessionsPlayed: [Session!]!
  sessionsWon: [Session!]!
  ratings: [Rating!]!
  name: String!
  lastSession: DateTime
}

input PlayerInput {
  id: ID
  games: [ID!]
  name: String!
}

type Playtime {
  id: ID!
  start: DateTime!
  end: DateTime
  session: Session!
}

type PlaytimeCollectionData {
  count: Int!
  items: [Playtime!]!
}

input PlaytimeInput {
  id: ID
  end: DateTime
  session: ID!
  start: DateTime!
}

type Query {
  games(gameData: InputCollection!): GameCollectionData!
  game(id: ID!): Game!
  categories: [Category!]!
  category(id: ID!): Category!
  universes: [Universe!]!
  universe(id: ID!): Universe!
  sessions(sessionData: InputCollection!): SessionCollectionData!
  session(id: ID!): Session!
  mechanisms: [Mechanism!]!
  mechanism(id: ID!): Mechanism!
  moods: [Mood!]!
  mood(id: ID!): Mood!
  players: [Player!]!
  player(id: ID!): Player!
  playtimes(playtimeData: InputCollection!): PlaytimeCollectionData!
  playtime(id: ID!): Playtime!
  user(id: ID): User!
  wishlists(wishlistData: InputCollection!): WishlistCollectionData!
  wishlist(id: ID!): Wishlist!
  ratings(ratingData: InputCollection!): RatingCollectionData!
  statisticsCounts: CountsModel!
  statisticsGamesCountPlayed(statisticsData: InputCollection!): GamesCountPlayedCollectionDataModel!
  statisticsGamesLastPlayed(statisticsData: InputCollection!): GamesLastPlayedCollectionDataModel!
  statisticsGamesTimePlayed(statisticsData: InputCollection!): GamesTimePlayedCollectionDataModel!
  statisticsPlaytimesGroupedByDaytime(statisticsData: InputCollection!): GraphCollectionDataModel!
}

type Rating {
  id: ID!
  rating: Int!
  game: Game!
  player: Player!
}

type RatingCollectionData {
  count: Int!
  items: [Rating!]!
}

input RatingInput {
  id: ID
  rating: Int!
  game: ID!
  player: ID!
}

type Session {
  id: ID!
  players: [Player!]!
  winners: [Player!]!
  game: Game
  playtimes: [Playtime!]!
  comment: String
  isChallenge: Boolean!
  isVirtual: Boolean!
}

type SessionCollectionData {
  count: Int!
  items: [Session!]!
}

input SessionInput {
  players: [ID!]
  winners: [ID!]
  game: ID
  playtimes: [SessionPlaytimeInput!]
  comment: String
  isChallenge: Boolean
  isVirtual: Boolean
}

input SessionPlaytimeInput {
  start: DateTime!
  end: DateTime
}

input SessionPlaytimeUpdate {
  id: String
  start: DateTime!
  end: DateTime
}

type Universe {
  id: ID!
  games: [Game!]!
  name: String!
}

input UniverseInput {
  id: ID
  games: [ID!]
  name: String!
}

input UpdateCategoryInput {
  id: ID!
  games: [ID!]
  name: String
}

input UpdateGameInput {
  idBGG: Int
  ratingBGG: Float
  countPlayersMin: Int
  countPlayersMax: Int
  minutesPlaytimeMin: Int
  minutesPlaytimeMax: Int
  complexity: Int
  size: Int
  universes: [ID!]
  categories: [ID!]
  mechanisms: [ID!]
  moods: [ID!]
  images: String
  ratings: [ID!]
  playableWith: [ID!]
  isExpansionOf: ID
  expansions: [ID!]
  name: String
  description: String
  isCoop: Boolean
  isDigital: Boolean
  id: ID!
}

input UpdateMechanismInput {
  id: ID!
  games: [ID!]
  name: String
}

input UpdateMoodInput {
  id: ID!
  games: [ID!]
  name: String
}

input UpdatePlayerInput {
  id: ID!
  games: [ID!]
  name: String
}

input UpdatePlaytimeInput {
  id: ID!
  end: DateTime
  session: ID
  start: DateTime
}

input UpdateRatingInput {
  id: ID!
  rating: Int
  game: ID
  player: ID
}

input UpdateSessionInput {
  players: [ID!]
  winners: [ID!]
  game: ID
  playtimes: [SessionPlaytimeUpdate!]
  comment: String
  isChallenge: Boolean
  isVirtual: Boolean
  id: ID!
}

input UpdateUniverseInput {
  id: ID!
  games: [ID!]
  name: String
}

input UpdateWishlistInput {
  id: ID!
  name: String
  price: Int
  description: String
  link: String
  giftFor: Int
  images: String
  taken: Boolean
}

type User {
  id: ID!
  name: String!
  password: String!
}

type Wishlist {
  id: ID!
  price: Int!
  name: String!
  taken: Boolean
  description: String!
  link: String!
  giftFor: Float!
  images: String!
}

type WishlistCollectionData {
  count: Int!
  items: [Wishlist!]!
}

input WishlistInput {
  id: ID
  name: String!
  price: Int!
  description: String!
  link: String!
  giftFor: Int!
  images: String
  taken: Boolean
}

