# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type Category {
    games: [Game!]!
    id: ID!
    name: String!
}

type Game {
    categories: [Category!]!
    complexity: Int
    countPlayersMax: Int
    countPlayersMin: Int
    description: String
    expansions: [Game!]!
    id: ID!
    images: [Image!]!
    isCoop: Boolean
    isExpansionOf: Game
    mechanisms: [Mechanism!]!
    minutesPlaytimeMax: Int
    minutesPlaytimeMin: Int
    moods: [Mood!]!
    name: String!
    playableWith: [Game!]!
    ratings: [Rating!]!
    sessions: [Session!]!
    size: Int
    universes: [Universe!]!
}

type GameCollectionData {
    count: Int!
    items: [Game!]!
}

type Image {
    games: [Game!]!
    id: ID!
    link: String!
    name: String!
}

type ImageCollectionData {
    count: Int!
    items: [Image!]!
}

type Mechanism {
    games: [Game!]!
    id: ID!
    name: String!
}

type Mood {
    games: [Game!]!
    id: ID!
    name: String!
}

type Mutation {
    createCategory(categoryData: CategoryInput!): Category!
    createGame(gameData: GameInput!): Game!
    createImage(imageData: ImageInput!): Image!
    createMechanism(mechanismData: MechanismInput!): Mechanism!
    createMood(moodData: MoodInput!): Mood!
    createPlayer(playerData: PlayerInput!): Player!
    createPlaytime(playtimeData: PlaytimeInput!): Playtime!
    createRating(ratingData: RatingInput!): Rating!
    createSession(sessionData: SessionInput!): Session!
    createUniverse(universeData: UniverseInput!): Universe!
    createWishlist(wishlistData: WishlistInput!): Wishlist!
    deleteCategory(id: ID!): Boolean!
    deleteGame(id: ID!): Boolean!
    deleteImage(id: ID!): Boolean!
    deleteMechanism(id: ID!): Boolean!
    deleteMood(id: ID!): Boolean!
    deletePlayer(id: ID!): Boolean!
    deletePlaytime(id: ID!): Boolean!
    deleteRating(id: ID!): Boolean!
    deleteSession(id: ID!): Boolean!
    deleteUniverse(id: ID!): Boolean!
    deleteWishlist(id: Int!): Boolean!
    updateCategory(categoryData: UpdateCategoryInput!): Category!
    updateGame(gameData: UpdateGameInput!): Game!
    updateImage(imageData: UpdateImageInput!): Image!
    updateMechanism(mechanismData: UpdateMechanismInput!): Mechanism!
    updateMood(moodData: UpdateMoodInput!): Mood!
    updatePlayer(playerData: UpdatePlayerInput!): Player!
    updatePlaytime(playtimeData: UpdatePlaytimeInput!): Playtime!
    updateRating(ratingData: UpdateRatingInput!): Rating!
    updateSession(sessionData: UpdateSessionInput!): Session!
    updateUniverse(universeData: UpdateUniverseInput!): Universe!
    updateWishlist(wishlistData: UpdateWishlistInput!): Wishlist!
}

type Player {
    id: ID!
    name: String!
    ratings: [Rating!]!
    sessionsPlayed: [Session!]!
    sessionsWon: [Session!]!
}

type Playtime {
    end: DateTime!
    id: ID!
    session: Session!
    start: DateTime!
}

type PlaytimeCollectionData {
    count: Int!
    items: [Playtime!]!
}

type Query {
    categories: [Category!]!
    category(id: ID!): Category!
    game(id: ID!): Game!
    games(gameData: InputCollection!): GameCollectionData!
    image(id: ID!): Image!
    images(imageData: InputCollection!): ImageCollectionData!
    mechanism(id: ID!): Mechanism!
    mechanisms: [Mechanism!]!
    mood(id: ID!): Mood!
    moods: [Mood!]!
    player(id: ID!): Player!
    players: [Player!]!
    playtime(id: ID!): Playtime!
    playtimes(playtimeData: InputCollection!): PlaytimeCollectionData!
    rating(id: ID!): Rating!
    ratings: [Rating!]!
    session(id: ID!): Session!
    sessions(sessionData: SessionCollectionInput!): SessionCollectionData!
    universe(id: ID!): Universe!
    universes: [Universe!]!
    user(id: ID): User!
    wishlist(id: Int!): Wishlist!
    wishlists: [Wishlist!]!
}

type Rating {
    game: Game!
    id: ID!
    player: Player!
    rating: Int
}

type Session {
    game: Game
    id: ID!
    players: [Player!]!
    playtimes: [Playtime!]!
    winners: [Player!]!
}

type SessionCollectionData {
    count: Int!
    items: [Session!]!
}

type Universe {
    games: [Game!]!
    id: ID!
    name: String!
}

type User {
    id: ID!
    name: String!
    password: String!
}

type Wishlist {
    id: ID!
    link: String!
    name: String!
    price: Int!
}

input CategoryInput {
    games: [ID!]
    id: ID
    name: String!
}

input GameInput {
    categories: [ID!]
    complexity: Int
    countPlayersMax: Int
    countPlayersMin: Int
    description: String
    expansions: [ID!]
    id: ID
    images: [ID!]
    isCoop: Boolean
    isExpansionOf: ID
    mechanisms: [ID!]
    minutesPlaytimeMax: Int
    minutesPlaytimeMin: Int
    moods: [ID!]
    name: String!
    playableWith: [ID!]
    ratings: [ID!]
    size: Int
    universes: [ID!]
}

input ImageInput {
    games: [ID!]
    id: ID
    link: String!
    name: String!
}

input InputCollection {
    count: Int!
    page: Int!
    sortBy: String!
    sortDesc: Boolean!
}

input MechanismInput {
    games: [ID!]
    id: ID
    name: String!
}

input MoodInput {
    games: [ID!]
    id: ID
    name: String!
}

input PlayerInput {
    games: [ID!]
    id: ID
    name: String!
}

input PlaytimeInput {
    end: DateTime!
    id: ID
    session: ID!
    start: DateTime!
}

input RatingInput {
    game: ID!
    id: ID
    player: ID!
    rating: Int!
}

input SessionCollectionInput {
    collection: InputCollection!
    game: ID
}

input SessionInput {
    game: ID
    id: ID
    players: [ID!]
    playtimes: [SessionPlaytimeInput!]
    winners: [ID!]
}

input SessionPlaytimeInput {
    end: DateTime!
    start: DateTime!
}

input UniverseInput {
    games: [ID!]
    id: ID
    name: String!
}

input UpdateCategoryInput {
    games: [ID!]
    id: ID!
    name: String
}

input UpdateGameInput {
    categories: [ID!]
    complexity: Int
    countPlayersMax: Int
    countPlayersMin: Int
    description: String
    expansions: [ID!]
    id: ID!
    images: [ID!]
    isCoop: Boolean
    isExpansionOf: ID
    mechanisms: [ID!]
    minutesPlaytimeMax: Int
    minutesPlaytimeMin: Int
    moods: [ID!]
    name: String
    playableWith: [ID!]
    ratings: [ID!]
    size: Int
    universes: [ID!]
}

input UpdateImageInput {
    games: [ID!]
    id: ID!
    link: String
    name: String
}

input UpdateMechanismInput {
    games: [ID!]
    id: ID!
    name: String
}

input UpdateMoodInput {
    games: [ID!]
    id: ID!
    name: String
}

input UpdatePlayerInput {
    games: [ID!]
    id: ID!
    name: String
}

input UpdatePlaytimeInput {
    end: DateTime
    id: ID!
    session: ID
    start: DateTime
}

input UpdateRatingInput {
    game: ID
    id: ID!
    player: ID
    rating: Int
}

input UpdateSessionInput {
    game: ID
    id: ID!
    players: [ID!]
    playtimes: [SessionPlaytimeInput!]
    winners: [ID!]
}

input UpdateUniverseInput {
    games: [ID!]
    id: ID!
    name: String
}

input UpdateWishlistInput {
    id: ID!
}

input WishlistInput {
    id: ID
}


"A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format."
scalar DateTime